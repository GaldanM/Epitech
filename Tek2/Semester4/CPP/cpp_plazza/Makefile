#############################################################################
# Makefile for building: cpp_plazza
# Generated by qmake (2.01a) (Qt 4.8.5) on: dim. avr. 26 19:54:10 2015
# Project:  cpp_plazza.pro
# Template: app
# Command: /usr/bin/qmake -o Makefile cpp_plazza.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/default -I. -I/usr/include/QtCore -I/usr/include/QtGui -I/usr/include -I. -I.
LINK          = g++
LFLAGS        = -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib64 -lQtGui -L/usr/lib64 -L/usr/X11R6/lib -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = Americaine.cpp \
		Command.cpp \
		Cook.cpp \
		Factory.cpp \
		Fantasia.cpp \
		Kitchen.cpp \
		Margarita.cpp \
		Mutex.cpp \
		MyFifo.cpp \
		Parse.cpp \
		Pizza.cpp \
		Regina.cpp \
		Thread.cpp \
		win.cpp moc_win.cpp
OBJECTS       = Americaine.o \
		Command.o \
		Cook.o \
		Factory.o \
		Fantasia.o \
		Kitchen.o \
		Margarita.o \
		Mutex.o \
		MyFifo.o \
		Parse.o \
		Pizza.o \
		Regina.o \
		Thread.o \
		win.o \
		moc_win.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		cpp_plazza.pro
QMAKE_TARGET  = plazza
DESTDIR       = 
TARGET        = plazza

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: cpp_plazza.pro  /usr/share/qt4/mkspecs/default/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib64/libQtGui.prl \
		/usr/lib64/libQtCore.prl
	$(QMAKE) -o Makefile cpp_plazza.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/shared.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib64/libQtGui.prl:
/usr/lib64/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile cpp_plazza.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/cpp_plazza1.0.0 || $(MKDIR) .tmp/cpp_plazza1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/cpp_plazza1.0.0/ && $(COPY_FILE) --parents Americaine.hpp Command.hpp Cook.h Exception.hpp Factory.hpp Fantasia.hpp IMutex.h Kitchen.h Margarita.hpp MyFifo.h Parse.hpp Pizza.hpp Regina.hpp Thread.h win.h .tmp/cpp_plazza1.0.0/ && $(COPY_FILE) --parents Americaine.cpp Command.cpp Cook.cpp Factory.cpp Fantasia.cpp Kitchen.cpp Margarita.cpp Mutex.cpp MyFifo.cpp Parse.cpp Pizza.cpp Regina.cpp Thread.cpp win.cpp .tmp/cpp_plazza1.0.0/ && (cd `dirname .tmp/cpp_plazza1.0.0` && $(TAR) cpp_plazza1.0.0.tar cpp_plazza1.0.0 && $(COMPRESS) cpp_plazza1.0.0.tar) && $(MOVE) `dirname .tmp/cpp_plazza1.0.0`/cpp_plazza1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/cpp_plazza1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


re:	clean all

fclean: clean
	rm -f $(TARGET)

####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_win.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_win.cpp
moc_win.cpp: Command.hpp \
		Pizza.hpp \
		Kitchen.h \
		MyFifo.h \
		Factory.hpp \
		Margarita.hpp \
		Regina.hpp \
		Americaine.hpp \
		Fantasia.hpp \
		Cook.h \
		IMutex.h \
		Thread.h \
		win.h \
		win.h
	/usr/bin/moc $(DEFINES) $(INCPATH) win.h -o moc_win.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

Americaine.o: Americaine.cpp Americaine.hpp \
		Pizza.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Americaine.o Americaine.cpp

Command.o: Command.cpp Parse.hpp \
		Factory.hpp \
		Margarita.hpp \
		Pizza.hpp \
		Regina.hpp \
		Americaine.hpp \
		Fantasia.hpp \
		Command.hpp \
		Kitchen.h \
		MyFifo.h \
		Cook.h \
		IMutex.h \
		Thread.h \
		win.h \
		Exception.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Command.o Command.cpp

Cook.o: Cook.cpp Cook.h \
		IMutex.h \
		Thread.h \
		Pizza.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Cook.o Cook.cpp

Factory.o: Factory.cpp Factory.hpp \
		Margarita.hpp \
		Pizza.hpp \
		Regina.hpp \
		Americaine.hpp \
		Fantasia.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Factory.o Factory.cpp

Fantasia.o: Fantasia.cpp Fantasia.hpp \
		Pizza.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Fantasia.o Fantasia.cpp

Kitchen.o: Kitchen.cpp Exception.hpp \
		Kitchen.h \
		MyFifo.h \
		Factory.hpp \
		Margarita.hpp \
		Pizza.hpp \
		Regina.hpp \
		Americaine.hpp \
		Fantasia.hpp \
		Cook.h \
		IMutex.h \
		Thread.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Kitchen.o Kitchen.cpp

Margarita.o: Margarita.cpp Margarita.hpp \
		Pizza.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Margarita.o Margarita.cpp

Mutex.o: Mutex.cpp IMutex.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Mutex.o Mutex.cpp

MyFifo.o: MyFifo.cpp MyFifo.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o MyFifo.o MyFifo.cpp

Parse.o: Parse.cpp Parse.hpp \
		Factory.hpp \
		Margarita.hpp \
		Pizza.hpp \
		Regina.hpp \
		Americaine.hpp \
		Fantasia.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Parse.o Parse.cpp

Pizza.o: Pizza.cpp Pizza.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Pizza.o Pizza.cpp

Regina.o: Regina.cpp Regina.hpp \
		Pizza.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Regina.o Regina.cpp

Thread.o: Thread.cpp Thread.h \
		Pizza.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Thread.o Thread.cpp

win.o: win.cpp Exception.hpp \
		win.h \
		Command.hpp \
		Pizza.hpp \
		Kitchen.h \
		MyFifo.h \
		Factory.hpp \
		Margarita.hpp \
		Regina.hpp \
		Americaine.hpp \
		Fantasia.hpp \
		Cook.h \
		IMutex.h \
		Thread.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o win.o win.cpp

moc_win.o: moc_win.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_win.o moc_win.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

